name: NeoLoad docker
on: 
  workflow_dispatch:
    inputs:
      TEST_NAME: 
        description: 'Neoload test name'
        required: true
        type: string
        default: 'NeoloadPOC'
env: 
  WORKSPACE_NAME: 'Evolution'
  SCENARIO: 'scenarioPOC'
  VERSION: '9.2.1'
  NEOLOADWEB_URL: 'https://neoload-api.saas.neotys.com/'
  NEOLOADWEB_TOKEN: ${{ secrets.NEOLOADWEB_TOKEN }}
  NEOLOADWEB_ZONE: ${{ secrets.NEOLOADWEB_ZONE }}
  NEOLOADWEB_LG_COUNT: '2'
  NEOLOADWEB_CONTROLLER_IMAGE: 'neotys/neoload-controller:9.2.1'
  NEOLOADWEB_LG_IMAGE: 'neotys/neoload-loadgenerator:9.2.1'


jobs:
  RUN_NEOLOAD:
    permissions: write-all
    runs-on: ubuntu-latest

    steps:
    
      - name: Checkout
        uses: actions/checkout@v3
        
        
      - name: "Install NeoLoad CLI"
        run: |
          pip3 install -U neoload
          neoload docker install
        
      - name: "NeoLoad Login"
        run: neoload login --url ${{ env.NEOLOADWEB_URL}} --workspace ${{ env.WORKSPACE_NAME }} ${{ env.NEOLOADWEB_TOKEN }}
        
      - name: "Set agents and controllers"
        run: |
          neoload config set docker.lg.default_count=${{ env.NEOLOADWEB_LG_COUNT }}
          neoload config set docker.zone=${{ env.NEOLOADWEB_ZONE }}
          neoload config set docker.controller.image=${{ env.NEOLOADWEB_CONTROLLER_IMAGE }}
          neoload config set docker.lg.image=${{ env.NEOLOADWEB_LG_IMAGE }}
          neoload docker up
  
      - name: "NeoLoad run test"
        id: Run_test
        run: >
          echo "TEST_GUID=$(
          neoload run 
          --external-url $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID 
          --external-url-label "Github Action Run ${{ env.VERSION }}.$GITHUB_RUN_NUMBER" 
          --name "Docker Test - Github build ${{ env.VERSION }}.$GITHUB_RUN_NUMBER" 
          --description "Neoload POC Docker"
          --scenario ${{ env.SCENARIO }}
          ${{ inputs.TEST_NAME }} | head -n 1 | sed -r 's/^.{14}//')" >> $GITHUB_OUTPUT
          
      - name: "print test id"
        if: always()
        run: |
          echo "${{ steps.Run_test.outputs.TEST_GUID }}"

      - name: "Generate Test Report"
        if: always()
        run: neoload test-results junitsla

      - name: "Publish Test Report"
        if: always()
        uses: scacap/action-surefire-report@v1
        with:
          report_paths:  junit-sla.xml
          fail_on_test_failures: true
          
      - name: "Add Test"
        if: always()
        run: neoload test-results use ${{ steps.Run_test.outputs.TEST_GUID }}
        
      - name: "Generate Raw data"
        if: always()
        run: neoload report --out-file raw_data_${{ steps.Run_test.outputs.TEST_GUID }}.json
        
      - name: "Upload Raw data"
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Raw_data
          path: raw_data_${{ steps.Run_test.outputs.TEST_GUID }}.json
        
      - name: "Generate transaction data"
        if: always()
        run: neoload report --json-in raw_data_${{ steps.Run_test.outputs.TEST_GUID }}.json --template builtin:transactions-csv --out-file transactions_${{ steps.Run_test.outputs.TEST_GUID }}.csv
        
      - name: "Upload Transaction data"
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: transactions
          path: transactions_${{ steps.Run_test.outputs.TEST_GUID }}.csv
          
    #  - name: "Generate HTML Report"
    #    if: always()
    #    run: neoload report --json-in raw_data_${{ steps.Run_test.outputs.TEST_GUID }}.json --template tests/resources/jinja/sample-custom-report.html.j2 --out-file report_${{ steps.Run_test.outputs.TEST_GUID }}.html
        
    #  - name: "Upload HTML Report"
    #    if: always()
    #    uses: actions/upload-artifact@v3
    #    with:
    #      name: report
    #      path: report_${{ steps.Run_test.outputs.TEST_GUID }}.html

      - name: "Upload All"
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: all
          path: |
            raw_data_${{ steps.Run_test.outputs.TEST_GUID }}.json
            transactions_${{ steps.Run_test.outputs.TEST_GUID }}.csv
            report_${{ steps.Run_test.outputs.TEST_GUID }}.html
            junit-sla.xml
        

